"use strict";(self.webpackChunknutsdb=self.webpackChunknutsdb||[]).push([[886],{5266:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>o,frontMatter:()=>s,metadata:()=>u,toc:()=>b});var t=r(5893),i=r(1151);const s={},l="\u4f7f\u7528\u96c6\u5408",u={id:"tutorial/set",title:"\u4f7f\u7528\u96c6\u5408",description:"SAdd",source:"@site/docs/tutorial/set.md",sourceDirName:"tutorial",slug:"/tutorial/set",permalink:"/nutsdb/docs/tutorial/set",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/set.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528\u5217\u8868",permalink:"/nutsdb/docs/tutorial/list"},next:{title:"\u4f7f\u7528\u6709\u5e8f\u96c6\u5408",permalink:"/nutsdb/docs/tutorial/sorted_set"}},c={},b=[{value:"SAdd",id:"sadd",level:2},{value:"SAreMembers",id:"saremembers",level:2},{value:"SCard",id:"scard",level:2},{value:"SDiffByOneBucket",id:"sdiffbyonebucket",level:2},{value:"SDiffByTwoBuckets",id:"sdiffbytwobuckets",level:2},{value:"SHasKey",id:"shaskey",level:2},{value:"SIsMember",id:"sismember",level:2},{value:"SMembers",id:"smembers",level:2},{value:"SMoveByOneBucket",id:"smovebyonebucket",level:2},{value:"SMoveByTwoBuckets",id:"smovebytwobuckets",level:2},{value:"SPop",id:"spop",level:2},{value:"SRem",id:"srem",level:2},{value:"SUnionByOneBucket",id:"sunionbyonebucket",level:2},{value:"SUnionByTwoBuckets",id:"sunionbytwobuckets",level:2},{value:"SKeys",id:"skeys",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"\u4f7f\u7528\u96c6\u5408",children:"\u4f7f\u7528\u96c6\u5408"}),"\n",(0,t.jsx)(n.h2,{id:"sadd",children:"SAdd"}),"\n",(0,t.jsx)(n.p,{children:"\u6dfb\u52a0\u4e00\u4e2a\u6307\u5b9a\u7684member\u5143\u7d20\u5230\u6307\u5b9abucket\u7684\u91cc\u7684\u6307\u5b9a\u96c6\u5408key\u4e2d\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.Update(\n    func(tx *nutsdb.Tx) error {\n            bucket := "bucketForSet"\n        key := []byte("mySet")\n        return tx.SAdd(bucket, key, []byte("a"), []byte("b"), []byte("c"))\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"saremembers",children:"SAreMembers"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u591a\u4e2a\u6210\u5458member\u662f\u5426\u662f\u6307\u5b9abucket\u7684\u91cc\u7684\u6307\u5b9a\u96c6\u5408key\u7684\u6210\u5458\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "bucketForSet"\n        key := []byte("mySet")\n        if ok, err := tx.SAreMembers(bucket, key, []byte("a"), []byte("b"), []byte("c")); err != nil {\n            return err\n        } else {\n            fmt.Println("SAreMembers:", ok)\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"scard",children:"SCard"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u6307\u5b9abucket\u7684\u6307\u5b9a\u7684\u96c6\u5408key\u7684\u57fa\u6570 (\u96c6\u5408\u5143\u7d20\u7684\u6570\u91cf)\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "bucketForSet"\n        key := []byte("mySet")\n        if num, err := tx.SCard(bucket, key); err != nil {\n            return err\n        } else {\n            fmt.Println("SCard:", num)\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sdiffbyonebucket",children:"SDiffByOneBucket"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u4e00\u4e2a\u96c6\u5408\u4e0e\u7ed9\u5b9a\u96c6\u5408\u7684\u5dee\u96c6\u7684\u5143\u7d20\u3002\u8fd9\u4e24\u4e2a\u96c6\u5408\u90fd\u5728\u4e00\u4e2abucket\u4e2d\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'\nkey1 := []byte("mySet1") // \u96c6\u54081\nkey2 := []byte("mySet2") // \u96c6\u54082\nbucket := "bucketForSet"\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        return tx.SAdd(bucket, key1, []byte("a"), []byte("b"), []byte("c"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        return tx.SAdd(bucket, key2, []byte("c"), []byte("d"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        if items, err := tx.SDiffByOneBucket(bucket, key1, key2); err != nil {\n            return err\n        } else {\n            fmt.Println("SDiffByOneBucket:", items)\n            for _, item := range items {\n                fmt.Println("item", string(item))\n            }\n            //item a\n            //item b\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sdiffbytwobuckets",children:"SDiffByTwoBuckets"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u4e00\u4e2a\u96c6\u5408\u4e0e\u7ed9\u5b9a\u96c6\u5408\u7684\u5dee\u96c6\u7684\u5143\u7d20\u3002\u8fd9\u4e24\u4e2a\u96c6\u5408\u5206\u522b\u5728\u4e0d\u540cbucket\u4e2d\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'bucket1 := "bucket1"\nkey1 := []byte("mySet1")\n\nbucket2 := "bucket2"\nkey2 := []byte("mySet2")\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        return tx.SAdd(bucket1, key1, []byte("a"), []byte("b"), []byte("c"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        return tx.SAdd(bucket2, key2, []byte("c"), []byte("d"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        if items, err := tx.SDiffByTwoBuckets(bucket1, key1, bucket2, key2); err != nil {\n            return err\n        } else {\n            fmt.Println("SDiffByTwoBuckets:", items)\n            for _, item := range items {\n                fmt.Println("item", string(item))\n            }\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"shaskey",children:"SHasKey"}),"\n",(0,t.jsx)(n.p,{children:"\u5224\u65ad\u662f\u5426\u6307\u5b9a\u7684\u96c6\u5408\u5728\u6307\u5b9a\u7684bucket\u4e2d\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'\nbucket := "bucketForSet"\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        if ok, err := tx.SHasKey(bucket, []byte("mySet")); err != nil {\n            return err\n        } else {\n            fmt.Println("SHasKey", ok)\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sismember",children:"SIsMember"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u6210\u5458member\u662f\u5426\u662f\u6307\u5b9abucket\u7684\u5b58\u6307\u5b9akey\u96c6\u5408\u7684\u6210\u5458\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'bucket := "bucketForSet"\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        if ok, err := tx.SIsMember(bucket, []byte("mySet"), []byte("a")); err != nil {\n            return err\n        } else {\n            fmt.Println("SIsMember", ok)\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"smembers",children:"SMembers"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u6307\u5b9abucket\u7684\u6307\u5b9akey\u96c6\u5408\u6240\u6709\u7684\u5143\u7d20\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'bucket := "bucketForSet"\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        if items, err := tx.SMembers(bucket, []byte("mySet")); err != nil {\n            return err\n        } else {\n            fmt.Println("SMembers", items)\n            for _, item := range items {\n                fmt.Println("item", string(item))\n            }\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"smovebyonebucket",children:"SMoveByOneBucket"}),"\n",(0,t.jsx)(n.p,{children:"\u5c06member\u4ecesource\u96c6\u5408\u79fb\u52a8\u5230destination\u96c6\u5408\u4e2d\uff0c\u5176\u4e2dsource\u96c6\u5408\u548cdestination\u96c6\u5408\u5747\u5728\u4e00\u4e2abucket\u4e2d\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'bucket3 := "bucket3"\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        return tx.SAdd(bucket3, []byte("mySet1"), []byte("a"), []byte("b"), []byte("c"))\n    }); err != nil {\n    log.Fatal(err)\n}\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        return tx.SAdd(bucket3, []byte("mySet2"), []byte("c"), []byte("d"), []byte("e"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        if ok, err := tx.SMoveByOneBucket(bucket3, []byte("mySet1"), []byte("mySet2"), []byte("a")); err != nil {\n            return err\n        } else {\n            fmt.Println("SMoveByOneBucket", ok)\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        if items, err := tx.SMembers(bucket3, []byte("mySet1")); err != nil {\n            return err\n        } else {\n            fmt.Println("after SMoveByOneBucket bucket3 mySet1 SMembers", items)\n            for _, item := range items {\n                fmt.Println("item", string(item))\n            }\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        if items, err := tx.SMembers(bucket3, []byte("mySet2")); err != nil {\n            return err\n        } else {\n            fmt.Println("after SMoveByOneBucket bucket3 mySet2 SMembers", items)\n            for _, item := range items {\n                fmt.Println("item", string(item))\n            }\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"smovebytwobuckets",children:"SMoveByTwoBuckets"}),"\n",(0,t.jsx)(n.p,{children:"\u5c06member\u4ecesource\u96c6\u5408\u79fb\u52a8\u5230destination\u96c6\u5408\u4e2d\u3002\u5176\u4e2dsource\u96c6\u5408\u548cdestination\u96c6\u5408\u5728\u4e24\u4e2a\u4e0d\u540c\u7684bucket\u4e2d\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'bucket4 := "bucket4"\nbucket5 := "bucket5"\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        return tx.SAdd(bucket4, []byte("mySet1"), []byte("a"), []byte("b"), []byte("c"))\n    }); err != nil {\n    log.Fatal(err)\n}\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        return tx.SAdd(bucket5, []byte("mySet2"), []byte("c"), []byte("d"), []byte("e"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        if ok, err := tx.SMoveByTwoBuckets(bucket4, []byte("mySet1"), bucket5, []byte("mySet2"), []byte("a")); err != nil {\n            return err\n        } else {\n            fmt.Println("SMoveByTwoBuckets", ok)\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        if items, err := tx.SMembers(bucket4, []byte("mySet1")); err != nil {\n            return err\n        } else {\n            fmt.Println("after SMoveByTwoBuckets bucket4 mySet1 SMembers", items)\n            for _, item := range items {\n                fmt.Println("item", string(item))\n            }\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        if items, err := tx.SMembers(bucket5, []byte("mySet2")); err != nil {\n            return err\n        } else {\n            fmt.Println("after SMoveByTwoBuckets bucket5 mySet2 SMembers", items)\n            for _, item := range items {\n                fmt.Println("item", string(item))\n            }\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"spop",children:"SPop"}),"\n",(0,t.jsx)(n.p,{children:"\u4ece\u6307\u5b9abucket\u91cc\u7684\u6307\u5b9akey\u7684\u96c6\u5408\u4e2d\u79fb\u9664\u5e76\u8fd4\u56de\u4e00\u4e2a\u6216\u591a\u4e2a\u968f\u673a\u5143\u7d20\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        key := []byte("mySet")\n        if item, err := tx.SPop(bucket, key); err != nil {\n            return err\n        } else {\n            fmt.Println("SPop item from mySet:", string(item))\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"srem",children:"SRem"}),"\n",(0,t.jsx)(n.p,{children:"\u5728\u6307\u5b9abucket\u91cc\u9762\u79fb\u9664\u6307\u5b9a\u7684key\u96c6\u5408\u4e2d\u79fb\u9664\u6307\u5b9a\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5143\u7d20\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'bucket6:="bucket6"\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        return tx.SAdd(bucket6, []byte("mySet"), []byte("a"), []byte("b"), []byte("c"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        if err := tx.SRem(bucket6, []byte("mySet"), []byte("a")); err != nil {\n            return err\n        } else {\n            fmt.Println("SRem ok")\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        if items, err := tx.SMembers(bucket6, []byte("mySet")); err != nil {\n            return err\n        } else {\n            fmt.Println("SMembers items:", items)\n            for _, item := range items {\n                fmt.Println("item:", string(item))\n            }\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sunionbyonebucket",children:"SUnionByOneBucket"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u6307\u5b9a\u4e00\u4e2abucket\u91cc\u9762\u7684\u7ed9\u5b9a\u7684\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6\u4e2d\u7684\u6240\u6709\u6210\u5458\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'bucket7 := "bucket1"\nkey1 := []byte("mySet1")\nkey2 := []byte("mySet2")\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        return tx.SAdd(bucket7, key1, []byte("a"), []byte("b"), []byte("c"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        return tx.SAdd(bucket7, key2, []byte("c"), []byte("d"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        if items, err := tx.SUnionByOneBucket(bucket7, key1, key2); err != nil {\n            return err\n        } else {\n            fmt.Println("SUnionByOneBucket:", items)\n            for _, item := range items {\n                fmt.Println("item", string(item))\n            }\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sunionbytwobuckets",children:"SUnionByTwoBuckets"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u6307\u5b9a\u4e24\u4e2abucket\u91cc\u9762\u7684\u7ed9\u5b9a\u7684\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6\u4e2d\u7684\u6240\u6709\u6210\u5458\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'bucket8 := "bucket1"\nkey1 := []byte("mySet1")\n\nbucket9 := "bucket2"\nkey2 := []byte("mySet2")\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        return tx.SAdd(bucket8, key1, []byte("a"), []byte("b"), []byte("c"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        return tx.SAdd(bucket9, key2, []byte("c"), []byte("d"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        if items, err := tx.SUnionByTwoBuckets(bucket8, key1, bucket9, key2); err != nil {\n            return err\n        } else {\n            fmt.Println("SUnionByTwoBucket:", items)\n            for _, item := range items {\n                fmt.Println("item", string(item))\n            }\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"skeys",children:"SKeys"}),"\n",(0,t.jsxs)(n.p,{children:["\u67e5\u627e",(0,t.jsx)(n.code,{children:"Set"}),"\u7c7b\u578b\u7684\u6240\u6709\u5339\u914d\u6307\u5b9a\u6a21\u5f0f",(0,t.jsx)(n.code,{children:"pattern"}),"\u7684",(0,t.jsx)(n.code,{children:"key"}),"\uff0c\u7c7b\u4f3c\u4e8eRedis\u547d\u4ee4: ",(0,t.jsx)(n.a,{href:"https://redis.io/commands/keys/",children:"KEYS"})]}),"\n",(0,t.jsxs)(n.p,{children:["\u6ce8\u610f\uff1a\u6a21\u5f0f\u5339\u914d\u4f7f\u7528 Go \u6807\u51c6\u5e93\u7684",(0,t.jsx)(n.code,{children:"filepath.Match"}),"\uff0c\u90e8\u5206\u7ec6\u8282\u4e0a\u548credis\u7684\u884c\u4e3a\u6709\u533a\u522b\uff0c\u6bd4\u5982\u5bf9\u4e8e ",(0,t.jsx)(n.code,{children:"["})," \u7684\u5904\u7406\u3002"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.View(\n    func(tx *nutsdb.Tx) error {\n        var keys []string\n        err := tx.SKeys(bucket, "*", func(key string) bool {\n            keys = append(keys, key)\n            // true: continue, false: break\n            return true\n        })\n        fmt.Printf("keys: %v\\n", keys)\n        return err\n    }); err != nil {\n    log.Fatal(err)\n}\n'})})]})}function o(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>u,a:()=>l});var t=r(7294);const i={},s=t.createContext(i);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);