"use strict";(self.webpackChunknutsdb=self.webpackChunknutsdb||[]).push([[857],{7735:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>o,frontMatter:()=>d,metadata:()=>a,toc:()=>s});var t=r(5893),l=r(1151);const d={},i="\u4f7f\u7528\u6709\u5e8f\u96c6\u5408",a={id:"tutorial/sorted_set",title:"\u4f7f\u7528\u6709\u5e8f\u96c6\u5408",description:"\u6ce8\u610f\uff1a\u8fd9\u8fb9\u7684bucket\u662f\u6709\u5e8f\u96c6\u5408\u540d\u3002",source:"@site/docs/tutorial/sorted_set.md",sourceDirName:"tutorial",slug:"/tutorial/sorted_set",permalink:"/nutsdb/en/docs/tutorial/sorted_set",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/sorted_set.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u4f7f\u7528\u96c6\u5408",permalink:"/nutsdb/en/docs/tutorial/set"},next:{title:"\u4e0e\u5176\u4ed6\u7c7b\u4f3c\u4ea7\u54c1\u7684\u5bf9\u6bd4",permalink:"/nutsdb/en/docs/compare"}},c={},s=[{value:"ZAdd",id:"zadd",level:2},{value:"ZCard",id:"zcard",level:2},{value:"ZCount",id:"zcount",level:2},{value:"ZGetByKey",id:"zgetbykey",level:2},{value:"ZMembers",id:"zmembers",level:2},{value:"ZPeekMax",id:"zpeekmax",level:2},{value:"ZPeekMin",id:"zpeekmin",level:2},{value:"ZPopMax",id:"zpopmax",level:2},{value:"ZPopMin",id:"zpopmin",level:2},{value:"ZRangeByRank",id:"zrangebyrank",level:2},{value:"ZRangeByScore",id:"zrangebyscore",level:2},{value:"ZRank",id:"zrank",level:2},{value:"ZRevRank",id:"zrevrank",level:4},{value:"ZRem",id:"zrem",level:2},{value:"ZRemRangeByRank",id:"zremrangebyrank",level:2},{value:"ZScore",id:"zscore",level:2},{value:"ZKeys",id:"zkeys",level:2}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"\u4f7f\u7528\u6709\u5e8f\u96c6\u5408",children:"\u4f7f\u7528\u6709\u5e8f\u96c6\u5408"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"\u6ce8\u610f\uff1a\u8fd9\u8fb9\u7684bucket\u662f\u6709\u5e8f\u96c6\u5408\u540d\u3002"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"zadd",children:"ZAdd"}),"\n",(0,t.jsx)(n.p,{children:"\u5c06\u6307\u5b9a\u6210\u5458\uff08\u5305\u62eckey\u3001score\u3001value\uff09\u6dfb\u52a0\u5230\u6307\u5b9abucket\u7684\u6709\u5e8f\u96c6\u5408\uff08sorted set\uff09\u91cc\u9762\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet1" // \u6ce8\u610f\uff1a\u8fd9\u8fb9\u7684bucket\u662f\u6709\u5e8f\u96c6\u5408\u540d\n        key := []byte("key1")\n        return tx.ZAdd(bucket, key, 1, []byte("val1"))\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"zcard",children:"ZCard"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u6307\u5b9abucket\u7684\u7684\u6709\u5e8f\u96c6\u5143\u7d20\u4e2a\u6570\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet1"\n        if num, err := tx.ZCard(bucket); err != nil {\n            return err\n        } else {\n            fmt.Println("ZCard num", num)\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"zcount",children:"ZCount"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u6307\u5b9abucket\u7684\u6709\u5e8f\u96c6\uff0cscore\u503c\u5728min\u548cmax\u4e4b\u95f4(\u9ed8\u8ba4\u5305\u62ecscore\u503c\u7b49\u4e8estart\u6216end)\u7684\u6210\u5458\u3002"}),"\n",(0,t.jsx)(n.p,{children:"Opts\u5305\u542b\u7684\u53c2\u6570\uff1a"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Limit        int  // \u9650\u5236\u8fd4\u56de\u7684node\u6570\u76ee"}),"\n",(0,t.jsx)(n.li,{children:"ExcludeStart bool // \u6392\u9664start"}),"\n",(0,t.jsx)(n.li,{children:"ExcludeEnd   bool // \u6392\u9664end"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet1"\n        if num, err := tx.ZCount(bucket, 0, 1, nil); err != nil {\n            return err\n        } else {\n            fmt.Println("ZCount num", num)\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"zgetbykey",children:"ZGetByKey"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u4e00\u4e2a\u8282\u70b9\u901a\u8fc7\u6307\u5b9a\u7684bucket\u6709\u5e8f\u96c6\u5408\u548c\u6307\u5b9a\u7684key\u6765\u83b7\u53d6\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet1"\n        key := []byte("key2")\n        if node, err := tx.ZGetByKey(bucket, key); err != nil {\n            return err\n        } else {\n            fmt.Println("ZGetByKey key2 val:", string(node.Value))\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"zmembers",children:"ZMembers"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u6240\u6709\u6210\u5458\u901a\u8fc7\u5728\u6307\u5b9a\u7684bucket\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet1"\n        if nodes, err := tx.ZMembers(bucket); err != nil {\n            return err\n        } else {\n            fmt.Println("ZMembers:", nodes)\n\n            for _, node := range nodes {\n                fmt.Println("member:", node.Key(), string(node.Value))\n            }\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"zpeekmax",children:"ZPeekMax"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u6307\u5b9abucket\u6709\u5e8f\u96c6\u5408\u4e2d\u7684\u5177\u6709\u6700\u9ad8\u5f97\u5206\u7684\u6210\u5458\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet1"\n        if node, err := tx.ZPeekMax(bucket); err != nil {\n            return err\n        } else {\n            fmt.Println("ZPeekMax:", string(node.Value))\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"zpeekmin",children:"ZPeekMin"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u6307\u5b9abucket\u6709\u5e8f\u96c6\u5408\u4e2d\u7684\u5177\u6709\u6700\u4f4e\u5f97\u5206\u7684\u6210\u5458\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet1"\n        if node, err := tx.ZPeekMin(bucket); err != nil {\n            return err\n        } else {\n            fmt.Println("ZPeekMin:", string(node.Value))\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"zpopmax",children:"ZPopMax"}),"\n",(0,t.jsx)(n.p,{children:"\u5220\u9664\u5e76\u8fd4\u56de\u6307\u5b9abucket\u6709\u5e8f\u96c6\u5408\u4e2d\u7684\u5177\u6709\u6700\u9ad8\u5f97\u5206\u7684\u6210\u5458\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet1"\n        if node, err := tx.ZPopMax(bucket); err != nil {\n            return err\n        } else {\n            fmt.Println("ZPopMax:", string(node.Value)) //val3\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"zpopmin",children:"ZPopMin"}),"\n",(0,t.jsx)(n.p,{children:"\u5220\u9664\u5e76\u8fd4\u56de\u6307\u5b9abucket\u6709\u5e8f\u96c6\u5408\u4e2d\u7684\u5177\u6709\u6700\u4f4e\u5f97\u5206\u7684\u6210\u5458\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet1"\n        if node, err := tx.ZPopMin(bucket); err != nil {\n            return err\n        } else {\n            fmt.Println("ZPopMin:", string(node.Value)) //val1\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"zrangebyrank",children:"ZRangeByRank"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u6307\u5b9abucket\u6709\u5e8f\u96c6\u5408\u7684\u6392\u540dstart\u5230end\u7684\u8303\u56f4\uff08\u5305\u62ecstart\u548cend\uff09\u7684\u6240\u6709\u5143\u7d20\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// ZAdd add items\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet2"\n        key1 := []byte("key1")\n        return tx.ZAdd(bucket, key1, 1, []byte("val1"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet2"\n        key2 := []byte("key2")\n        return tx.ZAdd(bucket, key2, 2, []byte("val2"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet2"\n        key3 := []byte("key3")\n        return tx.ZAdd(bucket, key3, 3, []byte("val3"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\n// ZRangeByRank\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet2"\n        if nodes, err := tx.ZRangeByRank(bucket, 1, 2); err != nil {\n            return err\n        } else {\n            fmt.Println("ZRangeByRank nodes :", nodes)\n            for _, node := range nodes {\n                fmt.Println("item:", node.Key(), node.Score())\n            }\n            \n            //item: key1 1\n            //item: key2 2\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"zrangebyscore",children:"ZRangeByScore"}),"\n",(0,t.jsxs)(n.p,{children:["\u8fd4\u56de\u6307\u5b9abucket\u6709\u5e8f\u96c6\u5408\u7684\u5206\u6570start\u5230end\u7684\u8303\u56f4\uff08\u5305\u62ecstart\u548cend\uff09\u7684\u6240\u6709\u5143\u7d20\u3002\u5176\u4e2d\u6709\u4e2a",(0,t.jsx)(n.code,{children:"Opts"}),"\u53c2\u6570\u7528\u6cd5\u53c2\u8003",(0,t.jsx)(n.code,{children:"ZCount"}),"\u3002"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// ZAdd\nif err := db.Update(\n        func(tx *nutsdb.Tx) error {\n            bucket := "myZSet3"\n            key1 := []byte("key1")\n            return tx.ZAdd(bucket, key1, 70, []byte("val1"))\n        }); err != nil {\n        log.Fatal(err)\n    }\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet3"\n        key2 := []byte("key2")\n        return tx.ZAdd(bucket, key2, 90, []byte("val2"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet3"\n        key3 := []byte("key3")\n        return tx.ZAdd(bucket, key3, 86, []byte("val3"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\n// ZRangeByScore\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet3"\n        if nodes, err := tx.ZRangeByScore(bucket, 80, 100,nil); err != nil {\n            return err\n        } else {\n            fmt.Println("ZRangeByScore nodes :", nodes)\n            for _, node := range nodes {\n                fmt.Println("item:", node.Key(), node.Score())\n            }\n            //item: key3 86\n            //item: key2 90\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}   \n'})}),"\n",(0,t.jsx)(n.h2,{id:"zrank",children:"ZRank"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u6709\u5e8f\u96c6bucket\u4e2d\u6210\u5458\u6307\u5b9a\u6210\u5458key\u7684\u6392\u540d\u3002\u5176\u4e2d\u6709\u5e8f\u96c6\u6210\u5458\u6309score\u503c\u9012\u589e(\u4ece\u5c0f\u5230\u5927)\u987a\u5e8f\u6392\u5217\u3002\u6ce8\u610f\u6392\u540d\u4ee51\u4e3a\u5e95\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cscore\u503c\u6700\u5c0f\u7684\u6210\u5458\u6392\u540d\u4e3a1\u3002\n\u8fd9\u70b9\u548cRedis\u4e0d\u540c\uff0cRedis\u662f\u4ece0\u5f00\u59cb\u7684\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'\n// ZAdd\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet4"\n        key1 := []byte("key1")\n        return tx.ZAdd(bucket, key1, 70, []byte("val1"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet4"\n        key2 := []byte("key2")\n        return tx.ZAdd(bucket, key2, 90, []byte("val2"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet4"\n        key3 := []byte("key3")\n        return tx.ZAdd(bucket, key3, 86, []byte("val3"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\n// ZRank\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet4"\n        key1 := []byte("key1")\n        if rank, err := tx.ZRank(bucket, key1); err != nil {\n            return err\n        } else {\n            fmt.Println("key1 ZRank :", rank) // key1 ZRank : 1\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"zrevrank",children:"ZRevRank"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u6709\u5e8f\u96c6bucket\u4e2d\u6210\u5458\u6307\u5b9a\u6210\u5458key\u7684\u53cd\u5411\u6392\u540d\u3002\u5176\u4e2d\u6709\u5e8f\u96c6\u6210\u5458\u8fd8\u662f\u6309score\u503c\u9012\u589e(\u4ece\u5c0f\u5230\u5927)\u987a\u5e8f\u6392\u5217\u3002\u4f46\u662f\u83b7\u53d6\u53cd\u5411\u6392\u540d\uff0c\u6ce8\u610f\u6392\u540d\u8fd8\u662f\u4ee51\u4e3a\u5f00\u59cb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f46\u662f\u8fd9\u4e2a\u65f6\u5019score\u503c\u6700\u5927\u7684\u6210\u5458\u6392\u540d\u4e3a1\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// ZAdd\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet8"\n        key1 := []byte("key1")\n        return tx.ZAdd(bucket, key1, 10, []byte("val1"))\n    }); err != nil {\n    log.Fatal(err)\n}\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet8"\n        key2 := []byte("key2")\n        return tx.ZAdd(bucket, key2, 20, []byte("val2"))\n    }); err != nil {\n    log.Fatal(err)\n}\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet8"\n        key3 := []byte("key3")\n        return tx.ZAdd(bucket, key3, 30, []byte("val3"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\n// ZRevRank\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet8"\n        if rank, err := tx.ZRevRank(bucket, []byte("key3")); err != nil {\n            return err\n        } else {\n            fmt.Println("ZRevRank key1 rank:", rank) //ZRevRank key3 rank: 1\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"zrem",children:"ZRem"}),"\n",(0,t.jsx)(n.p,{children:"\u5220\u9664\u6307\u5b9a\u6210\u5458key\u5728\u4e00\u4e2a\u6307\u5b9a\u7684\u6709\u5e8f\u96c6\u5408bucket\u4e2d\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet5"\n        key1 := []byte("key1")\n        return tx.ZAdd(bucket, key1, 10, []byte("val1"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet5"\n        key2 := []byte("key2")\n        return tx.ZAdd(bucket, key2, 20, []byte("val2"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet5"\n        if nodes,err := tx.ZMembers(bucket); err != nil {\n            return err\n        } else {\n            fmt.Println("before ZRem key1, ZMembers nodes",nodes)\n            for _,node:=range nodes {\n                fmt.Println("item:",node.Key(),node.Score())\n            }\n        }\n        // before ZRem key1, ZMembers nodes map[key1:0xc00008cfa0 key2:0xc00008d090]\n        // item: key1 10\n        // item: key2 20\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet5"\n        if err := tx.ZRem(bucket, "key1"); err != nil {\n            return err\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet5"\n        if nodes,err := tx.ZMembers(bucket); err != nil {\n            return err\n        } else {\n            fmt.Println("after ZRem key1, ZMembers nodes",nodes)\n            for _,node:=range nodes {\n                fmt.Println("item:",node.Key(),node.Score())\n            }\n            // after ZRem key1, ZMembers nodes map[key2:0xc00008d090]\n            // item: key2 20\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"zremrangebyrank",children:"ZRemRangeByRank"}),"\n",(0,t.jsx)(n.p,{children:"\u5220\u9664\u6240\u6709\u6210\u5458\u6ee1\u8db3\u6392\u540dstart\u5230end\uff08\u5305\u62ecstart\u548cend\uff09\u5728\u4e00\u4e2a\u6307\u5b9a\u7684\u6709\u5e8f\u96c6\u5408bucket\u4e2d\u3002\u5176\u4e2d\u6392\u540d\u4ee51\u5f00\u59cb\uff0c\u6392\u540d1\u8868\u793a\u7b2c\u4e00\u4e2a\u8282\u70b9\u5143\u7d20\uff0c\u6392\u540d-1\u8868\u793a\u6700\u540e\u7684\u8282\u70b9\u5143\u7d20\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet6"\n        key1 := []byte("key1")\n        return tx.ZAdd(bucket, key1, 10, []byte("val1"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet6"\n        key2 := []byte("key2")\n        return tx.ZAdd(bucket, key2, 20, []byte("val2"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet6"\n        key3 := []byte("key3")\n        return tx.ZAdd(bucket, key3, 30, []byte("val2"))\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet6"\n        if nodes,err := tx.ZMembers(bucket); err != nil {\n            return err\n        } else {\n            fmt.Println("before ZRemRangeByRank, ZMembers nodes",nodes)\n            for _,node:=range nodes {\n                fmt.Println("item:",node.Key(),node.Score())\n            }\n            // before ZRemRangeByRank, ZMembers nodes map[key3:0xc00008d450 key1:0xc00008d270 key2:0xc00008d360]\n            // item: key1 10\n            // item: key2 20\n            // item: key3 30\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.Update(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet6"\n        if err := tx.ZRemRangeByRank(bucket, 1,2); err != nil {\n            return err\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n\nif err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet6"\n        if nodes,err := tx.ZMembers(bucket); err != nil {\n            return err\n        } else {\n            fmt.Println("after ZRemRangeByRank, ZMembers nodes",nodes)\n            for _,node:=range nodes {\n                fmt.Println("item:",node.Key(),node.Score())\n            }\n            // after ZRemRangeByRank, ZMembers nodes map[key3:0xc00008d450]\n            // item: key3 30\n            // key1 ZScore 10\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"zscore",children:"ZScore"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd4\u56de\u6307\u5b9a\u6709\u5e8f\u96c6bucket\u4e2d\uff0c\u6210\u5458key\u7684score\u503c\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.View(\n    func(tx *nutsdb.Tx) error {\n        bucket := "myZSet7"\n        if score,err := tx.ZScore(bucket, []byte("key1")); err != nil {\n            return err\n        } else {\n            fmt.Println("ZScore key1 score:",score)\n        }\n        return nil\n    }); err != nil {\n    log.Fatal(err)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"zkeys",children:"ZKeys"}),"\n",(0,t.jsxs)(n.p,{children:["\u67e5\u627e",(0,t.jsx)(n.code,{children:"Sorted Set"}),"\u7c7b\u578b\u7684\u6240\u6709\u5339\u914d\u6307\u5b9a\u6a21\u5f0f",(0,t.jsx)(n.code,{children:"pattern"}),"\u7684",(0,t.jsx)(n.code,{children:"key"}),"\uff0c\u7c7b\u4f3c\u4e8eRedis\u547d\u4ee4: ",(0,t.jsx)(n.a,{href:"https://redis.io/commands/keys/",children:"KEYS"})]}),"\n",(0,t.jsxs)(n.p,{children:["\u6ce8\u610f\uff1a\u6a21\u5f0f\u5339\u914d\u4f7f\u7528 Go \u6807\u51c6\u5e93\u7684",(0,t.jsx)(n.code,{children:"filepath.Match"}),"\uff0c\u90e8\u5206\u7ec6\u8282\u4e0a\u548credis\u7684\u884c\u4e3a\u6709\u533a\u522b\uff0c\u6bd4\u5982\u5bf9\u4e8e ",(0,t.jsx)(n.code,{children:"["})," \u7684\u5904\u7406\u3002"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'if err := db.View(\n    func(tx *nutsdb.Tx) error {\n        var keys []string\n        err := tx.ZKeys(bucket, "*", func(key string) bool {\n            keys = append(keys, key)\n            // true: continue, false: break\n            return true\n        })\n        fmt.Printf("keys: %v\\n", keys)\n        return err\n    }); err != nil {\n    log.Fatal(err)\n}\n'})})]})}function o(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>i});var t=r(7294);const l={},d=t.createContext(l);function i(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);